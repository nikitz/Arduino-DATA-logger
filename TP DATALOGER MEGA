
/* this is the first try to create TIME PRESSURE TEMPERATURE datalogger. It was a mix from few examples I saw in the net, 
which I have modified a little. IT records all the data in micro SD card.
It is build from:
1. arduino mega 2560
2. lcdkeypad shield
3. GY-68 powered with Bosch`s BMP180 containing precise pressure and temperature sensor.
4. micro card adapter v1.0
5. ZS-042 real time clock RTC with DS3231 chip if you want to use this board for a long time like me,  
with a normal cr2032 batery, you will have to cut the trace between the diode 5 and resistor 4 on the back. 
You will have to set it with another sketch. There is a example in the library.  
6 . BT dongle -  I am usin it, to check from time to time how is it woirking.
7. in future Iam planing to conect and few K type Temp sensors

*/


// ---------------------------delay time between each measurment -----------------

unsigned long previousMillis = 0; //will store the last time of active state
long wait = 0; // delay time  before measurement,  it will be readed from the file DELAY.txt 
long ID = 0; // number of measurment 

//------------lcd display -------------------
#include <LiquidCrystal.h> // initialize the library with the numbers of the interface pins
LiquidCrystal lcd(8,9,4,5,6,7);// this is for lcd keypad shield 


//-------------bmp pressure SENSOR-----------------
#include <SFE_BMP180.h>// Your sketch must #include this library, and the Wire library.
#include <Wire.h>// (Wire is a standard library included with Arduino.)
SFE_BMP180 pressure;// You will need to create an SFE_BMP180 object, here called "pressure":
#define ALTITUDE 164.0 // Altitude of Plovdiv in meters, need to calculate atmPressure at sea level.
//you must place the altitude of your place here.

// ---------------------rtc DS3231------------------
#include "ds3231.h" //#include "rtc_ds3231.h" the library for real time clock 
#define BUFF_MAX 128
uint8_t time[8];
char recv[BUFF_MAX];
unsigned int recv_size=0;
unsigned long prev, interval =0;

// -----------------------------Sd card-------------------
#include <SPI.h> // sd card is conected to SPI 50,51,52,53 on mega 
#include <SdFat.h> // sd card library. 
SdFat sd;
const int chipSelect = 53; // CS on mega is 53

// -------------------------- nrf24l01 maiacbugs library---------
// Radio set up 
#include "nRF24L01.h"
#include "RF24.h"

typedef struct{
  
  int A = 0; // remote id 
  float B = 0; // batt voltage
  float C = 0 ; // float temp bmp18b20
  float D = 0; //  float temp bmp18b20
  
} dataValues_t;

dataValues_t nanoSend; // struct name

RF24 radio(29,28);// cs ce pin 
const uint64_t pipes[2] = {0xF0F0F0F0E1LL, 0xF0F0F0F0D2LL}; // reading and sending pipe

// -------------- global variables --------------------
struct ts t; // used in GETTIME and needed in loop for print command
String minutes; // needed to write the minutes and second result correctly
String seconds;
char status; // usedn in GETPRESSUREandTEMPERATURE
double T,P,p0,a; //use in GETPRESSUREandTEMPERATURE
boolean lcdState = false;
int buttonState = 0;
int lastButtonState = 0;

//==================include jsson library

#include <ArduinoJson.h>

//####################################### SETUP () ############################################





void setup()
{
  lcd.begin(16,2); // lcd display init
  Serial.begin(9600); // pc serial init
  Serial2.begin(57600); // BT dongle setup for baud 57600. Conect RX of BT to TX2-16 and TX of BT to RX-17 on MEGA
  Wire.begin();// IIC or I2C 
  //setupRadio();
  radio.begin();
    radio.openWritingPipe(pipes[1]);
    radio.openReadingPipe(1, pipes[0]);
    radio.startListening();
  
  
  lcd.clear(); // erase lcd 
  lcd.setCursor(0,0); // set the cursor on upper line 
  lcd.print("DATA LOGGER 1.5b "); // print the welcome message to lcd
  lcd.setCursor(0,1);
  lcd.print("   LOADING ...");
  delay(1500);
  
  Serial.println("SD card initializing ...  ");  // sd card init...
  pinMode(53, OUTPUT);  //sd card chip select pin 53 on Mega
  lcd.setCursor(0,0); // set the cursor on upper line 
  lcd.print("SD card init...  "); // print the message to lcd
  delay(1000); // time to read message
  
  if (!sd.begin(chipSelect)){
    Serial.println("CARD FAILED OR NOT INSERTED");
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("CARD FAILED OR"); // print the message to lcd
    lcd.setCursor(0,1);
    lcd.print("NOT INSERTED");
    delay (1500);
    return;//dont do anything more
  }
  Serial.println("Card initialized correctly");
  lcd.setCursor(0,0);
  lcd.print("   SD card OK    ");
  delay(1000);
  
  File logFile = sd.open("TPLOG.csv", FILE_WRITE); //writing the header text in sd card to TPLOG.csv
  if(logFile)
  {
    logFile.println("Starting new record"); // usefull when searching start of records
    String header ="ID, DATE, TIME, TEMPERATURE, atmPRESSURE, NODE ID, NODE DATA";
    logFile.println(header); // writes the above text as first row. 
    logFile.close();
    //Serial.println(header); // for test only 
  }
else{
  Serial.print("Coldn`t open file");
}
  
  File delayFile = sd.open("DELAY.txt"); // open and read the DELAY.txt file in SD card
  if (delayFile) 
  {
    
    
    float decade = pow(10,(delayFile.available()-1)); //read byte by byte the data from sd card 
     while (delayFile.available()) 
     {
        float tempData = (delayFile.read() - '0');
          wait = tempData*decade*1000 + wait; // convert sec to millis
            decade = decade/10;         
                                   
      }
    
    delayFile.close();// close the file:
        Serial.print("THE DELAY BETWEEN MEASURMENT WILL BE:");
        Serial.print(wait/1000);
        Serial.println("Sec");
        lcd.setCursor(0,0);
      lcd.print("DELAY TIME is");
      lcd.setCursor(0,1);
      lcd.print(wait/1000);
      lcd.print("Sec            ");
      delay(1000);
  }
  else
  {
    Serial.println("error opening DELAY.txt");// if the file didn't open, print an error:
  }
  
  
  DS3231_init(DS3231_INTCN); // za rtc 
  memset(recv, 0, BUFF_MAX); // za rtc
  Serial.println("BMP180 initialization...");
  
  // Initialize the sensor (it is important to get calibration values stored on the device).

  if (pressure.begin()){
    Serial.println("BMP180 init success");
    Serial.println("Start of recording...");
   
  }
  else
  {
    // Oops, something went wrong, this is usually a connection problem,
    // see the comments at the top of this sketch for the proper connections.

    Serial.println("BMP180 init fail\n\n");
    lcd.setCursor(0,0);
    lcd.print("BMP180 init FAIL");
    while(1); // Pause forever.
  }
lcd.clear();

// Memory pool for JSON object tree.
// Inside the brackets, 200 is the size of the pool in bytes.
// If the JSON object is more complex, you need to increase that value.


}

// ############################# LOOP ()######################################################

void loop()
{
  // clear last recorded data
  nanoSend.A = 0;    
  nanoSend.B = 0; 
  nanoSend.C = 0 ; 
  nanoSend.D = 0; 
  
  buttonState = analogRead(0);        // --------------Button Debounce for RIGHT------
  if(buttonState != lastButtonState)
  if (buttonState == LOW ){
    if(lcdState == false)
    lcdState = true;
    else
    lcdState=false;
  }
  lastButtonState = buttonState; // ----------------------end of debouce for Right------
  
  
  GETTIME();// receiving Time data
  GETPRESSUREandTEMPERATURE();// receive Data and hour data
  GET_WIFI_DATA(); // receive data from remote sensors
  if(lcdState == false){
 Serial.println();
    Serial.print(lcdState);
    Serial.println();
    LCDTEXT1();
    }
    else{
    LCDTEXT2 ();
    }
  
  
  unsigned long currentMillis = millis();
    if (currentMillis - previousMillis >= wait)
  {
    if(lcdState == false){
    lcdState=true;
  }else{
    lcdState = false;
    }
    previousMillis = currentMillis;
  SDCARDRECORDING(); // record the data to SD
  ID = ID+1; // increase the ID number of every measurment 
    }
  }


//=============================== END OF LOOP ===========================================================


void GETTIME ()
{
  char in;
    char tempF[6]; 
    float temperature;
    char buff[BUFF_MAX];
    unsigned long now = millis();
    
    

    // show time once in a while
    if ((now - prev > interval) && (Serial.available() <= 0)) {
        DS3231_get(&t); //Get time
        
        temperature = DS3231_get_treg(); //Get temperature
        dtostrf(temperature, 5, 1, tempF);

        
        Serial.print(t.mday);
        // Serial2.print(t.mday); // BT SERIAL PRINT TEST working 

        printMonth(t.mon);
        
        
        Serial.print(t.year);
        //Serial2.print(t.year);
        Serial.print(" ");
       // Serial2.print(" ");
        
        Serial.print(t.hour);
        //Serial2.print(t.hour);
        
        Serial.print(":");
        //Serial2.print(":");
        
        if(t.min<10)
        {
          
          Serial.print("0");
          //Serial2.print("0");
          minutes = "0"+String(t.min);
        }else{
        
        Serial.print(t.min);
        //Serial2.print(t.min);
        
        Serial.print(":");
        //Serial2.print(":");
        minutes = String(t.min);
        }
        if(t.sec<10)
        {
          
          Serial.print("0");
          //Serial2.print("0");
          seconds = "0"+String(t.sec);
        }else{
        
        Serial.println(t.sec);
        //Serial2.println(t.sec);
        seconds = String(t.sec);
        /*lcd.setCursor(0,0);
        lcd.print(t.mday);
        lcd.print("/");
        lcd.print(t.mon);
        lcd.print("/");
        lcd.print(t.year);
        lcd.print(t.hour);
        lcd.print(":");
        lcd.print(minutes);
        lcd.print(":");
        lcd.print(seconds);
*/

        
        
        }
        prev = now;
        
}}

void printMonth(int month)
{
  switch(month)
  {
    case 1: Serial.print(" January "); break;
    case 2: Serial.print(" February "); break;
    case 3: Serial.print(" March "); break;
    case 4: Serial.print(" April ");break;
    case 5: Serial.print(" May ");break;
    case 6: Serial.print(" June ");break;
    case 7: Serial.print(" July ");break;
    case 8: Serial.print(" August ");break;
    case 9: Serial.print(" September ");break;
    case 10: Serial.print(" October ");break;
    case 11: Serial.print(" November ");break;
    case 12: Serial.print(" December ");break;
    default: Serial.print(" Error ");break;
  } 
}



void GETPRESSUREandTEMPERATURE()
{
//lcd.clear();
  
  // Loop here getting pressure readings every 10 seconds.
  // If you want sea-level-compensated pressure, as used in weather reports,
  // you will need to know the altitude at which your measurements are taken.
  // We're using a constant called ALTITUDE in this sketch:
  
  //Serial.println();
  Serial.print("provided altitude: ");
  Serial.print(ALTITUDE,0);
  Serial.print(" meters, ");
  Serial.print(ALTITUDE*3.28084,0);
  Serial.println(" feet");
  
  // If you want to measure altitude, and not pressure, you will instead need
  // to provide a known baseline pressure. This is shown at the end of the sketch.

  // You must first get a temperature measurement to perform a pressure reading.
  
  // Start a temperature measurement:
  // If request is successful, the number of ms to wait is returned.
  // If request is unsuccessful, 0 is returned.

  status = pressure.startTemperature();
  if (status != 0)
  {
    // Wait for the measurement to complete:
    delay(status);

    // Retrieve the completed temperature measurement:
    // Note that the measurement is stored in the variable T.
    // Function returns 1 if successful, 0 if failure.

    status = pressure.getTemperature(T);
    if (status != 0)
    {
      
      

            // Print out the measurement:
      Serial.print("temperature: ");
      Serial.print(T,2);
     // Serial2.print("TEMPERATURE IS: ");
     // Serial2.print(T,2);
     //Serial2.print((char)176);
     // Serial2.println("C");
      
            
      Serial.print(" deg C, ");
      Serial.print((9.0/5.0)*T+32.0,2);
      Serial.println(" deg F");
      
      // Start a pressure measurement:
      // The parameter is the oversampling setting, from 0 to 3 (highest res, longest wait).
      // If request is successful, the number of ms to wait is returned.
      // If request is unsuccessful, 0 is returned.

      status = pressure.startPressure(3);
      if (status != 0)
      {
        // Wait for the measurement to complete:
        delay(status);

        // Retrieve the completed pressure measurement:
        // Note that the measurement is stored in the variable P.
        // Note also that the function requires the previous temperature measurement (T).
        // (If temperature is stable, you can do one temperature measurement for a number of pressure measurements.)
        // Function returns 1 if successful, 0 if failure.

        status = pressure.getPressure(P,T);
        if (status != 0)
        {
          // Print out the measurement:
          
          Serial.print("absolute pressure: ");
          Serial.print(P,2);
          Serial.print(" mb, ");
          Serial.print(P*0.0295333727,2);
          Serial.println(" inHg");

          // The pressure sensor returns abolute pressure, which varies with altitude.
          // To remove the effects of altitude, use the sealevel function and your current altitude.
          // This number is commonly used in weather reports.
          // Parameters: P = absolute pressure in mb, ALTITUDE = current altitude in m.
          // Result: p0 = sea-level compensated pressure in mb

          p0 = pressure.sealevel(P,ALTITUDE); // we're at 1655 meters (Boulder, CO)
          Serial.print("relative (sea-level) pressure: ");
          Serial.print(p0,2);
          Serial.print(" mb, ");
          Serial.print(p0*0.0295333727,2);
          Serial.println(" inHg");
          
          //Serial2.print("ATMOSPHERIC PRESSURE IS ");
          //Serial2.print(p0,2);
          //Serial2.println("hPa");
                    
          //lcd.setCursor(0,1);
          //lcd.print("P:");
          //lcd.print(p0,1);
          //lcd.print("hPa");

          // On the other hand, if you want to determine your altitude from the pressure reading,
          // use the altitude function along with a baseline pressure (sea-level or other).
          // Parameters: P = absolute pressure in mb, p0 = baseline pressure in mb.
          // Result: a = altitude in m.

          a = pressure.altitude(P,p0);
          Serial.print("computed altitude: ");
          Serial.print(a,0);
          Serial.print(" meters, ");
          Serial.print(a*3.28084,0);
          Serial.println(" feet");
          Serial.println();
        }
        else Serial.println("error retrieving pressure measurement\n");
      }
      else Serial.println("error starting pressure measurement\n");
    }
    else Serial.println("error retrieving temperature measurement\n");
  }
  else Serial.println("error starting temperature measurement\n");

}

void SDCARDRECORDING()
{
 StaticJsonBuffer<200> jsonBuffer;
 JsonObject& root = jsonBuffer.createObject();
 root["ID_measure_number"] = (ID);
 root["Day"] = (t.mday);
 root["Month"] = (t.mon);
 root["Year"] = (t.year);
 root["Time"] = String(t.hour)+":"+String(minutes)+ ":" +String(seconds);
 root["TempSensor1"] = String(T,2);
 root["AtmPressure"] = String(p0,2);
 root["RemoteNodeID"] = (nanoSend.A);
 root["BattVoltage"] = String(nanoSend.B);
 root["RemoteTempSensor1"] = String(nanoSend.C);
 root["RemoteTempSensor2"] = String(nanoSend.D);
 
 
// ----------------create data string and write to sd card
String dataString =String(ID)+", "+ String(t.mday)+"/"+ String(t.mon)+ "/"+ String(t.year)+ ", " + String(t.hour)+":"+String(minutes)+ ":" +String(seconds)+ ", "+String(T,2)+", " +String(p0,2)+","+ String(nanoSend.A)+","+String(nanoSend.B)+ String(nanoSend.C)+","+String(nanoSend.D);


File logFile = sd.open("TPLOG.csv", FILE_WRITE);
if (logFile)
{
  logFile.println(dataString);
  logFile.close();
  Serial.print("SAVED DATA TO SD CARD IS:   ");
  Serial.println (dataString);
  root.printTo(Serial2);
  Serial2.println(); 

}
else
{
  Serial.println("Could not open  file");
}
}

void LCDTEXT1(){
  
  
  lcd.setCursor(0,0);
  lcd.print("atmPress ");
  lcd.print(p0,0);
  lcd.print("hPa     ");
  
  
  lcd.setCursor(3,1);
  lcd.print("       ");
  lcd.setCursor(0,1);
  lcd.print("ID");
  lcd.print(ID);
  lcd.setCursor(10,1);
  lcd.print(T,1);
  lcd.print((char)223);
  lcd.print("C       ");
     
}

void LCDTEXT2(){
  
  lcd.setCursor(0,0);
  lcd.print(t.mday);
  lcd.print(" ");
  switch(t.mon){
    case 1: lcd.print("JANUARY "); break;
    case 2: lcd.print("FEBRUARY"); break;
    case 3: lcd.print("  MART  "); break;
    case 4: lcd.print("  APRIL "); break;
    case 5: lcd.print("  MAY   "); break;
    case 6: lcd.print("  JUNE  "); break;
    case 7: lcd.print("  JULY  "); break;
    case 8: lcd.print(" AUGUST "); break;
    case 9: lcd.print("SEPTEMBR"); break;
    case 10: lcd.print("OCTOMBER"); break;
    case 11: lcd.print("NOVEMBRE"); break;
    case 12: lcd.print("DECEMBER"); break;
  }
  lcd.print(" ");
  lcd.print(t.year);
  lcd.print("   ");
  lcd.setCursor(0,1);
  lcd.print("--- ");
  lcd.print(t.hour);
  lcd.print(":");
  lcd.print(minutes);
  lcd.print(":");
  lcd.print(seconds);
  lcd.print(" ---");
}


void GET_WIFI_DATA(){

 if (radio.available())
  {
    bool done  = false;
      while (!done)
      {
        done = radio.read(&nanoSend, sizeof(nanoSend));
      }
      radio.stopListening();
      radio.write(&nanoSend, sizeof(nanoSend));
      radio.startListening();
  }
    
}
