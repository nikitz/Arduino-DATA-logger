
#include <OneWire.h>
OneWire  ds(5);  // on pin 10 (a 4.7K resistor is necessary)

#include <SPI.h>
#include "nRF24L01.h"
#include "RF24.h"

RF24 radio(9, 10);
const uint64_t pipes[2] = {0xF0F0F0F0E1LL, 0xF0F0F0F0D2LL};

typedef struct{
  
  int A;
  float B;
  float C;
  float D;
  
} dataValues_t;

dataValues_t nanoSend;


float  Vbat = 0; // battery voltage at A5
float Sensor_1_temp = 0;
float Sensor_2_temp =0;


void setup()
{
  Serial.begin(57600);
  
  radio.begin();
  // optionally, increase the delay between retries & # of retries
  //radio.setRetries(15,15);
  //radio.setPayloadSize(32);
  //radio.printDetails();
  radio.openWritingPipe(pipes[0]);
  radio.openReadingPipe(1, pipes[1]);
  
  //radio.startListening();
 
}

void loop()
{
  //-------------------dsb20-------------------
  byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte Sensor_1_ID[8] = {0x28, 0xFF, 0x29, 0x0D, 0x64, 0x14, 0x02, 0x8E}; // one white point 
  byte Sensor_2_ID[8] = {0x28, 0xFF, 0x08, 0xB8, 0x63, 0x14, 0x02, 0xD1}; // two white point
  //byte Sensor_3_ID[8] = {0x28, 0xFF, 0x18, 0xAE, 0x63, 0x14, 0x02, 0x9C}; // 3 white point
  //byte Sensor_4_ID[8] = {0x28, 0xFF, 0x97, 0xB7, 0x63, 0x14, 0x02, 0x93}; // 4 white point
  float celsius;
  

 // sensor 1 reading ----------------------------------------------

  ds.reset();
  //ds.select(Sensor_1_ID);
  ds.write(0xCC);
  ds.write(0x44, 1);        // start conversion, with parasite power on at the end
  
  delay(1000);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
  
  present = ds.reset();
  ds.select(Sensor_1_ID);    
  ds.write(0xBE);         // Read Scratchpad
  Serial.println("  ============================================");
  Serial.print("  Sensor 1 Data = ");
  Serial.print(present, HEX);
  Serial.print(" ");
  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = ds.read();
    Serial.print(data[i], HEX);
    Serial.print(" ");
  }
  Serial.print(" CRC=");
  Serial.print(OneWire::crc8(data, 8), HEX);
  Serial.println();

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  int16_t raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // "count remain" gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    // at lower res, the low bits are undefined, so let's zero them
    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
    //// default is 12 bit resolution, 750 ms conversion time
  }
  celsius = (float)raw / 16.0;
  Sensor_1_temp = celsius; 
  Serial.print("  Temperature = ");
  Serial.print(celsius);
  Serial.println(" Celsius, ");
  Serial.println("  ============================================");
  //Serial.print(Sensor_1_temp); for test 
  
  //-------------- sensor 2 readings --------------
  
  
  ds.reset();
  present = ds.reset();
  ds.select(Sensor_2_ID);
  ds.write(0xBE);         // Read Scratchpad
  //ds.write(0x44, 1);        // start conversion, with parasite power on at the end
  
  //delay(1000);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
  
 
  //ds.select(Sensor_2_ID);    
  

  Serial.print("  Sensor 2 Data = ");
  Serial.print(present, HEX);
  Serial.print(" ");
  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = ds.read();
    Serial.print(data[i], HEX);
    Serial.print(" ");
  }
  Serial.print(" CRC=");
  Serial.print(OneWire::crc8(data, 8), HEX);
  Serial.println();
  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // "count remain" gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    // at lower res, the low bits are undefined, so let's zero them
    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
    //// default is 12 bit resolution, 750 ms conversion time
  }
  celsius = (float)raw / 16.0;
   Sensor_2_temp = celsius; 
  Serial.print("  Temperature = ");
  Serial.print(celsius);
  Serial.println(" Celsius, ");
  Serial.println("  ============================================");
  
  
  //----------------------------------------
  unsigned long time = millis();
  const byte NumSamples = 20;
  float sumSamples = 0;
  
 /* for (int i= 0; i<NumSamples; i++){
    sumSamples += analogRead(A0);
    delay(10);
  } */ 
   
   //float temperatureValue1 =(500*(sumSamples/NumSamples)/1024);
  //float  temperatureValue2 = (temperatureValue1/2) ;
 
 // battery sense 
int Vsens = analogRead (A5);
float  Vbat = Vsens*(15.04/1023); // 15.04 work well 2.2M/1.1M
  int Value1 = 1;
  

nanoSend.A = Value1;
nanoSend.B = Vbat;
nanoSend.C = Sensor_1_temp;
nanoSend.D = Sensor_2_temp;


Serial.print("Sending data ...");

    radio.stopListening();
    bool ok = radio.write(&nanoSend, sizeof(nanoSend));
    radio.startListening();

   
unsigned long start_wait_at = millis();
bool timeout = false;
while (!radio.available() && !timeout)
  if (millis() - start_wait_at >250)
  timeout = true;
  
  if (timeout)
  {
    Serial.print("Failed, responce time out ");
  }
    else
   {
   radio.read(&nanoSend, sizeof(nanoSend));
   }
  
   Serial.println();
   Serial.print("NODE NUMBER is:");
   Serial.println(nanoSend.A);
 
   Serial.print("Battery Voltage is:");
   Serial.print(nanoSend.B);
   Serial.println("V");
   
   Serial.print("Temp sensor 1 data is:");
   Serial.println(nanoSend.C);
 
   Serial.print("Temp sensor 2 data is:");
   Serial.println(nanoSend.D);
   
   delay(2500);
}

