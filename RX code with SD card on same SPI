#include <LiquidCrystal.h>
LiquidCrystal lcd(8,9,4,5,6,7);
#include <SPI.h>
#include "nRF24L01.h"
#include "RF24.h"
#include <SD.h>

// set up variables using the SD utility library functions:
Sd2Card card;
SdVolume volume;
SdFile root;

// change this to match your SD shield or module;
// Arduino Ethernet shield: pin 4
// Adafruit SD shields and modules: pin 10
// Sparkfun SD shield: pin 8
const int chipSelect = 53;



typedef struct{
  
  int A;
  int B;
  float C;
  float D;
  
} dataValues_t;

dataValues_t nanoSend;

RF24 radio(29,28);
const uint64_t pipes[2] = {0xF0F0F0F0E1LL, 0xF0F0F0F0D2LL};


void setup(void)
{
    Serial.begin(57600);
  sdCardInfo();
  delay(5000);
    //Serial.begin(57600);
    lcd.begin(16,2);
    lcd.clear();
    radio.begin();
    radio.openWritingPipe(pipes[1]);
    radio.openReadingPipe(1, pipes[0]);
    radio.startListening();

}

void loop(void)
{
  if (radio.available())
  {
    bool done  = false;
      while (!done)
      {
        done = radio.read(&nanoSend, sizeof(nanoSend));
      }
      radio.stopListening();
      radio.write(&nanoSend, sizeof(nanoSend));
      radio.startListening();
  }
   Serial.print("DATA 1 is:");
   Serial.println(nanoSend.A);
   lcd.setCursor(0,0);;
   lcd.print("D1=");
   lcd.print(nanoSend.A);
   
   Serial.print("DATA 2 is:");
   Serial.println(nanoSend.B);
   lcd.print("  D2=");
   lcd.print(nanoSend.B);
   
   Serial.print("DATA 3 is:");
   Serial.println(nanoSend.C);
   lcd.setCursor(0,1);
   lcd.print("D3=");
   lcd.print(nanoSend.C);
   
   Serial.print("DATA 4 is:");
   Serial.println(nanoSend.D);
   lcd.print("D4=");
   lcd.print(nanoSend.D);
   
   //delay(1000);
}

// sd card 

void sdCardInfo()
{
 
  Serial.print("\nInitializing SD card...");
  // On the Ethernet Shield, CS is pin 4. It's set as an output by default.
  // Note that even if it's not used as the CS pin, the hardware SS pin
  // (10 on most Arduino boards, 53 on the Mega) must be left as an output
  // or the SD library functions will not work.
  pinMode(53, OUTPUT);     // change this to 53 on a mega


  // we'll use the initialization code from the utility libraries
  // since we're just testing if the card is working!
  if (!card.init(SPI_HALF_SPEED, chipSelect)) {
    Serial.println("initialization failed. Things to check:");
    Serial.println("* is a card is inserted?");
    Serial.println("* Is your wiring correct?");
    Serial.println("* did you change the chipSelect pin to match your shield or module?");
    return;
  } else {
    Serial.println("Wiring is correct and a card is present.");
  }

  // print the type of card
  Serial.print("\nCard type: ");
  switch (card.type()) {
    case SD_CARD_TYPE_SD1:
      Serial.println("SD1");
      break;
    case SD_CARD_TYPE_SD2:
      Serial.println("SD2");
      break;
    case SD_CARD_TYPE_SDHC:
      Serial.println("SDHC");
      break;
    default:
      Serial.println("Unknown");
  }

  // Now we will try to open the 'volume'/'partition' - it should be FAT16 or FAT32
  if (!volume.init(card)) {
    Serial.println("Could not find FAT16/FAT32 partition.\nMake sure you've formatted the card");
    return;
  }


  // print the type and size of the first FAT-type volume
  uint32_t volumesize;
  Serial.print("\nVolume type is FAT");
  Serial.println(volume.fatType(), DEC);
  Serial.println();

  volumesize = volume.blocksPerCluster();    // clusters are collections of blocks
  volumesize *= volume.clusterCount();       // we'll have a lot of clusters
  volumesize *= 512;                            // SD card blocks are always 512 bytes
  Serial.print("Volume size (bytes): ");
  Serial.println(volumesize);
  Serial.print("Volume size (Kbytes): ");
  volumesize /= 1024;
  Serial.println(volumesize);
  Serial.print("Volume size (Mbytes): ");
  volumesize /= 1024;
  Serial.println(volumesize);


  Serial.println("\nFiles found on the card (name, date and size in bytes): ");
  root.openRoot(volume);

  // list all files in the card with date and size
  root.ls(LS_R | LS_DATE | LS_SIZE);
}  

